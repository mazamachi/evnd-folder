Title: 世界で闘うプログラミング力を鍛える150問
Tags: programming career
Notebook:

[TOC]

# 世界で闘うプログラミング力を鍛える150問
## 読むことにしたわけ
+ google インターンの面接があるから
+ 面接の知識とかもえられるっぽかったから
+ 蟻本はちょっとむずかしすぎた

---
# まとめ
## 面接の流れ
+ 連絡が来ないからといって落ちたわけではないかも
+ 失敗トップ10
  + PCで練習
  + 声に出して回答しない
  + 急ぎすぎる（まず問題の意味を理解し，理解してからコーディングし，テストする）
  + 実務的なコードになっていない

## 面接試験の舞台裏
_アメリカの話だし他の会社については今回は興味ないので斜め読み_

+ googleはスケーラビリティとかビットの問題が問われがち

## 特殊な状況
_特殊じゃないので飛ばした_

## 面接の前に
+ 良い経験を得る: プロジェクト型授業・インターン・なんか起業とか
+ ネットワークを築く
+ 履歴書: 長くないほうが良い
  + Yを実装することでXができて，その結果Zになった

## 行動に関する質問
準備しておくと良い表

|共通の質問|プロジェクト1|
|:---|:---|
|最も苦労したこと||
|学んだこと||
|最も興味深かったこと||
|最も大変だったバグ||
|最も楽しんだこと||
|チームメイトとの衝突||

+ あなたの弱点はなんですか？
+ そのプロジェクトで最も苦労したのはどんな点ですか？
+ 質問の三カテゴリ
  1. 純粋な質問 - 会社の文化についてなど
  1. 洞察力を示す質問 - その企業の技術に関する質問
  1. 情熱を示す質問 - 自分が興味を持っていることをアピール
+ 対策
  + 特殊感を出し，偉そうな感じを出さない
  + 詳細を制限する
  + 構造化された答え
    + 要点から入る
    + S.A.R. -- 状況の概要→自分の行動→結果

## 技術的な質問
+ 練習方法： 自分で解く，紙に書く，テストも紙の上で，コードをコンピュータに入力

### 技術的な問題への5ステップ
1. 曖昧さを解決するために面接官に質問する
  + データ量やどんな種類のデータが与えられるのかなど，必要な質問もある
1. アルゴリズムを設計する
  + 考慮すべきこと: 消費メモリと計算量, データが大量の場合どうなるか, 他に起こる問題, 他の制限とのバランス・トレードオフ, 特定のデータを活かしているか?
  + 最初にブルートフォース的な解放について言及するのも良い
  + 最終的に最適解を答えることを求められている
1. 擬似コードを書く
  + あとでちゃんとしたコードを書くことを述べておく
1. 適当な速さでコードを書く
  + データ構造はどんどん使う - オブジェクト指向っぽい
  + コードを詰め込まない - 狭すぎるとミスる
1. コードのテストを行い，注意深くミスの修正をする
  + 極端なケース，ユーザーエラー(nullや負の値など)，一般的なケース

### アルゴリズム5つの手法
_この節は具体例がとても良い_

1. 具体例
1. パターンマッチング -- もとの問題と似ている問題を考え，その問題の解法を修正する
1. 単純化と一般化 -- 最初にデータの方や両と言った制約を変更して単純化 -> 問題を一般化して複雑なものに適応
1. 初期状態からの積み上げ -- 初期状態について問題を解く→次の状態について解く->Nについて解く(再帰的)
1. 使えるデータ構造の一覧を順に適用していく

### 良い，きれいなコードとは
+ データ構造はどんどん使う．クラスは定義しよう
+ 適切に再利用する
+ モジュール化し，コードの塊をメソッドに切り分ける
+ 柔軟かつ堅牢であるように，一般的な実装方法でコードを書く
+ エラーチェックをする．ASSERTやifなどで入力値が正しいかをチェックする
  + エラーチェックをあとで書くとか伝えても良い

## オファーとその後
_斜め読み_

---
ここから問題

# データ構造
## 配列と文字列
+ ハッシュテーブルはめっちゃ使う
+ StringBuffer を使うと，appendだけでよくなるので省メモリ

+ 文字列中の各文字に対するハッシュの代わりに、長さ256の配列を用意することも出来る(ascii限定)(1.1)
+ 文字列を最後尾から編集すると省メモリ(1.4)
+ 正確な座標などの情報が必要かどうか考える(1.7)
+ 回転はつなぐ(1.8)

## 連結リスト
+ 「ランナー」テクニック: 最初から巡回するポインタと少し先を巡回するポインタを2つ同時に扱う
+ そのノードを消すのではなく、書き換えて次を消すとかもあり(2.3)
+ 複数のリストを作って連結するのも楽(2.4)
+ 再帰的に繰り返すことも検討する(2.5)

## スタックとキュー
+

$$\sum_{k=1}^n k^2$$
